@using odevkuafor.Models
@model AppointmentViewModel

<div class="container mt-4">
    <h2 class="mb-4">Randevu Oluştur</h2>

    <form asp-action="Create" method="post" class="needs-validation" novalidate>
        <div class="mb-3">
            <label for="CustomerName" class="form-label">Adınız:</label>
            <input type="text" class="form-control" id="CustomerName" asp-for="CustomerName" required />
            <span asp-validation-for="CustomerName" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="AppointmentDate" class="form-label">Randevu Tarihi:</label>
            <input type="date" class="form-control" id="AppointmentDate"
                   min="@DateTime.Now.ToString("yyyy-MM-dd")"
                   asp-for="AppointmentDate"
                   required
                   onchange="updateAvailableHours()" />
            <span asp-validation-for="AppointmentDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="AppointmentTime" class="form-label">Randevu Saati:</label>
            <select class="form-select" id="AppointmentTime" name="AppointmentTime" required>
                <option value="">Önce diğer alanları doldurun</option>
            </select>
            <div class="invalid-feedback">
                Lütfen randevu saati seçin
            </div>
        </div>

        <div class="mb-3">
            <label for="ServiceId" class="form-label">Hizmet Seçin:</label>
            <select id="ServiceId" asp-for="ServiceId" class="form-select" required onchange="updateAvailableHours()">
                <option value="">Hizmet Seçin</option>
                @if (Model?.Services != null)
                {
                    @foreach (var service in Model.Services)
                    {
                        <option value="@service.Id" data-duration="@service.DurationInMinutes">
                            @service.Name - @service.Price₺ (@(service.DurationInMinutes) dakika)
                        </option>
                    }
                }
            </select>
            <span asp-validation-for="ServiceId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="EmployeeId" class="form-label">Kuaför Seçin:</label>
            <select id="EmployeeId" asp-for="EmployeeId" class="form-select" required onchange="updateAvailableHours()">
                <option value="">Kuaför Seçin</option>
                @if (Model?.Employees != null)
                {
                    @foreach (var employee in Model.Employees)
                    {
                        <option value="@employee.Id">@employee.Name</option>
                    }
                }
            </select>
            <span asp-validation-for="EmployeeId" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Randevu Oluştur</button>
    </form>
</div>
<script>// Sayfa yüklendiğinde çalışacak kod
    // Sayfa yüklendiğinde çalışacak kod
    async function updateAvailableHours() {
        const dateInput = document.getElementById('AppointmentDate');
        const employeeId = document.getElementById('EmployeeId').value;
        const serviceId = document.getElementById('ServiceId').value;
        const timeSelect = document.getElementById('AppointmentTime');

        // Tüm gerekli alanların dolu olduğunu kontrol et
        if (!dateInput.value || !employeeId || !serviceId) {
            timeSelect.innerHTML = '<option value="">Önce diğer alanları doldurun</option>';
            return;
        }

        try {
            timeSelect.innerHTML = '<option value="">Yükleniyor...</option>';

            // URL'yi oluştururken tarihi doğru formatta gönderdiğimizden emin oluyoruz
            const date = new Date(dateInput.value);
            const formattedDate = date.toISOString().split('T')[0];

            const response = await fetch(
                `/Appointment/GetAvailableHours?date=${encodeURIComponent(formattedDate)}&employeeId=${employeeId}&serviceId=${serviceId}`,
                {
                    headers: {
                        'Accept': 'application/json'
                    }
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const hours = await response.json();

            timeSelect.innerHTML = '<option value="">Saat Seçin</option>';

            if (hours && hours.length > 0) {
                hours.forEach(hour => {
                    const option = document.createElement('option');
                    option.value = hour;
                    option.textContent = hour;
                    timeSelect.appendChild(option);
                });
            } else {
                timeSelect.innerHTML = '<option value="">Bu tarihte uygun saat bulunamadı</option>';
            }
        } catch (error) {
            console.error('Hata:', error);
            timeSelect.innerHTML = '<option value="">Bir hata oluştu, lütfen tekrar deneyin</option>';
        }
    }

    // Form alanlarının değişikliklerini dinle
    document.addEventListener('DOMContentLoaded', function () {
        const dateInput = document.getElementById('AppointmentDate');
        const employeeSelect = document.getElementById('EmployeeId');
        const serviceSelect = document.getElementById('ServiceId');

        // İlk yüklemede minimum tarihi ayarla
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        dateInput.min = tomorrow.toISOString().split('T')[0];

        // Herhangi bir alan değiştiğinde saatleri güncelle
        dateInput.addEventListener('change', updateAvailableHours);
        employeeSelect.addEventListener('change', updateAvailableHours);
        serviceSelect.addEventListener('change', updateAvailableHours);
    });
    </script>