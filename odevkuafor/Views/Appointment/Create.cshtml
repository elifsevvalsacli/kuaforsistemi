@using odevkuafor.Models
@model AppointmentViewModel

<div class="container mt-4">
    <h2 class="mb-4">Randevu Oluştur</h2>

    <!-- Add an alert div for showing warnings -->
    <div id="timeSlotWarning" class="alert alert-warning" style="display: none;" role="alert">
        Bu saat dilimi için randevu dolu! Lütfen başka bir saat seçin.
    </div>

    <form asp-action="Create" method="post" class="needs-validation" novalidate>
        <div class="mb-3">
            <label for="CustomerName" class="form-label">Adınız:</label>
            <input type="text" class="form-control" id="CustomerName" asp-for="CustomerName" required />
            <span asp-validation-for="CustomerName" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="AppointmentDate" class="form-label">Randevu Tarihi:</label>
            <input type="date" class="form-control" id="AppointmentDate"
                   min="@DateTime.Now.ToString("yyyy-MM-dd")"
                   asp-for="AppointmentDate"
                   required
                   onchange="updateAvailableHours()" />
            <span asp-validation-for="AppointmentDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="AppointmentTime" class="form-label">Randevu Saati:</label>
            <select class="form-select" id="AppointmentTime" name="AppointmentTime" required>
                <option value="">Önce diğer alanları doldurun</option>
            </select>
            <div class="invalid-feedback">
                Lütfen randevu saati seçin
            </div>
        </div>

        <div class="mb-3">
            <label for="ServiceId" class="form-label">Hizmet Seçin:</label>
            <select id="ServiceId" asp-for="ServiceId" class="form-select" required onchange="updateAvailableHours()">
                <option value="">Hizmet Seçin</option>
                @if (Model?.Services != null)
                {
                    @foreach (var service in Model.Services)
                    {
                        <option value="@service.Id" data-duration="@service.DurationInMinutes">
                            @service.Name - @service.Price₺ (@(service.DurationInMinutes) dakika)
                        </option>
                    }
                }
            </select>
            <span asp-validation-for="ServiceId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label for="EmployeeId" class="form-label">Kuaför Seçin:</label>
            <select id="EmployeeId" asp-for="EmployeeId" class="form-select" required onchange="updateAvailableHours()">
                <option value="">Kuaför Seçin</option>
                @if (Model?.Employees != null)
                {
                    @foreach (var employee in Model.Employees)
                    {
                        <option value="@employee.Id">@employee.Name</option>
                    }
                }
            </select>
            <span asp-validation-for="EmployeeId" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Randevu Oluştur</button>
    </form>
</div>

<script>async function updateAvailableHours() {
        const date = document.getElementById("AppointmentDate").value;
        const employeeId = document.getElementById("EmployeeId").value;
        const serviceId = document.getElementById("ServiceId").value;
        const warningDiv = document.getElementById("timeSlotWarning");

        // Hide any existing warning
        warningDiv.style.display = "none";

        if (!date || !employeeId || !serviceId) return;

        try {
            const response = await fetch(`/Appointment/GetAvailableHours?date=${date}&employeeId=${employeeId}&serviceId=${serviceId}`);
            if (!response.ok) {
                throw new Error("Saatler alınamadı");
            }

            const availableHours = await response.json();
            const timeSelect = document.getElementById("AppointmentTime");
            timeSelect.innerHTML = ""; // Önceki seçenekleri temizle

            if (availableHours.length === 0) {
                // If no hours are available, show warning
                warningDiv.textContent = "Bu tarih için uygun randevu saati bulunmamaktadır.";
                warningDiv.style.display = "block";

                // Add a disabled default option
                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Uygun saat bulunmamaktadır";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                timeSelect.appendChild(defaultOption);
            } else {
                availableHours.forEach(hour => {
                    const option = document.createElement("option");
                    option.value = hour;
                    option.textContent = hour;
                    timeSelect.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Hata:", error);
            warningDiv.textContent = "Randevu saatleri yüklenirken bir hata oluştu.";
            warningDiv.style.display = "block";
        }
    }

    // Add event listener for time slot selection
    document.getElementById("AppointmentTime").addEventListener("change", function (e) {
        const warningDiv = document.getElementById("timeSlotWarning");
        warningDiv.style.display = "none"; // Hide warning when new time is selected
    });</script>